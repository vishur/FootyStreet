<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ assembly name="System.Configuration" #>
<#@ output extension=".cs"#>
<#@ import namespace="System.IO" #>


<#

       ProjectTraverser.Host = Host;


const string inputFile = @"FootyStreet.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var    fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
       return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);

foreach (var customEntity in CustomEntityType.GetEntityTypes(typeMapper, itemCollection))
{
    var entity = customEntity.EntityType;
       fileManager.StartNewFile(entity.Name + ".cs");

    BeginNamespace(code);
#>



<#=codeStringGenerator.UsingDirectives(false)#>
<#=codeStringGenerator.EntityClassOpening(customEntity)#>
{
<#
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(entity);
    var collectionNavigationProperties = typeMapper.GetCollectionNavigationProperties(entity);
    var complexProperties = typeMapper.GetComplexProperties(entity);

    if (propertiesWithDefaultValues.Any() || collectionNavigationProperties.Any() || complexProperties.Any())
    {
#>
    public <#=code.Escape(entity)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var navigationProperty in collectionNavigationProperties)
        {
#>
        this.<#=code.Escape(navigationProperty)#> = new HashSet<<#=typeMapper.GetTypeName(navigationProperty.ToEndMember.GetEntityType())#>>();
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
        this.<#=code.Escape(complexProperty)#> = new <#=typeMapper.GetTypeName(complexProperty.TypeUsage)#>();
<#
        }
#>
    }

<#
    }

    var simpleProperties = typeMapper.GetSimpleProperties(entity);
    if (simpleProperties.Any())
    {
        foreach (var edmProperty in simpleProperties)
        {
#>
    <#=codeStringGenerator.Property(edmProperty)#>
<#
        }
    }

    if (complexProperties.Any())
    {
#>

<#
        foreach(var complexProperty in complexProperties)
        {
#>
   <#=codeStringGenerator.Property(complexProperty)#>
<#
        }
    }

    var navigationProperties = typeMapper.GetNavigationProperties(entity);
    if (navigationProperties.Any())
    {
#>

<#
        foreach (var navigationProperty in navigationProperties)
        {
#>
    <#=codeStringGenerator.NavigationProperty(navigationProperty)#>
<#
        }
    }


       var customMembers = customEntity.CustomMembers;
    if (customMembers.Any())
    {
#>

<#
        foreach (var member in customMembers)
        {
#>
    <#=member#>
<#
        }
    }


#>

}
<#
    EndNamespace(code);
}

foreach (var complex in typeMapper.GetItemsToGenerate<ComplexType>(itemCollection))
{
    fileManager.StartNewFile(complex.Name + ".cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(false, false)#>
<#=Accessibility.ForType(complex)#> partial class <#=code.Escape(complex)#>
{
<#
    var complexProperties = typeMapper.GetComplexProperties(complex);
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(complex);

    if (propertiesWithDefaultValues.Any() || complexProperties.Any())
    {
#>
    public <#=code.Escape(complex)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
        this.<#=code.Escape(complexProperty)#> = new <#=typeMapper.GetTypeName(complexProperty.TypeUsage)#>();
<#
        }
#>
    }

<#
    }

    var simpleProperties = typeMapper.GetSimpleProperties(complex);
    if (simpleProperties.Any())
    {
        foreach(var edmProperty in simpleProperties)
        {
#>
    <#=codeStringGenerator.Property(edmProperty)#>
<#
        }
    }

    if (complexProperties.Any())
    {
#>

<#
        foreach(var edmProperty in complexProperties)
        {
#>
    <#=codeStringGenerator.Property(edmProperty)#>
<#
        }
    }
#>
}
<#
    EndNamespace(code);
}

foreach (var enumType in typeMapper.GetEnumItemsToGenerate(itemCollection))
{
    fileManager.StartNewFile(enumType.Name + ".cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(false, false)#>
<#
    if (typeMapper.EnumIsFlags(enumType))
    {
#>
[Flags]
<#
    }
#>
<#=codeStringGenerator.EnumOpening(enumType)#>
{
<#
    var foundOne = false;
    
    foreach (MetadataItem member in typeMapper.GetEnumMembers(enumType))
    {
        foundOne = true;
#>
    <#=code.Escape(typeMapper.GetEnumMemberName(member))#> = <#=typeMapper.GetEnumMemberValue(member)#>,
<#
    }

    if (foundOne)
    {
        this.GenerationEnvironment.Remove(this.GenerationEnvironment.Length - 3, 1);
    }
#>
}
<#
    EndNamespace(code);
}

fileManager.Process();

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#=codeStringGenerator.UsingDirectives(true)#>
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}


       public static class ProjectTraverser 
       {
              public static Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host { get; set; }
       } 

public const string TemplateId = "CSharp_DbContext_Types_EF5";

public class CodeStringGenerator
{
    private readonly CodeGenerationTools _code;
    private readonly TypeMapper _typeMapper;
    private readonly MetadataTools _ef;

    public CodeStringGenerator(CodeGenerationTools code, TypeMapper typeMapper, MetadataTools ef)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(typeMapper, "typeMapper");
        ArgumentNotNull(ef, "ef");

        _code = code;
        _typeMapper = typeMapper;
        _ef = ef;
    }

    public string Property(EdmProperty edmProperty)
    {
        
              return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            Accessibility.ForProperty(edmProperty),
            _typeMapper.GetTypeName(edmProperty.TypeUsage),
            _code.Escape(edmProperty),
            _code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
            _code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
    }

    public string NavigationProperty(NavigationProperty navigationProperty)
    {
        var endType = _typeMapper.GetTypeName(navigationProperty.ToEndMember.GetEntityType());
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            AccessibilityAndVirtual(Accessibility.ForProperty(navigationProperty)),
            navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType,
            _code.Escape(navigationProperty),
            _code.SpaceAfter(Accessibility.ForGetter(navigationProperty)),
            _code.SpaceAfter(Accessibility.ForSetter(navigationProperty)));
    }
    
    public string AccessibilityAndVirtual(string accessibility)
    {
        return accessibility + (accessibility != "private" ? " virtual" : "");
    }
    
    public string EntityClassOpening(CustomEntityType customEntity)
    {
              EntityType entity = customEntity.EntityType;
              
              return string.Format(
                     CultureInfo.InvariantCulture,
                     "{0} {1}partial class {2}{3}{4}",
                     Accessibility.ForType(entity),
                     _code.SpaceAfter(_code.AbstractOption(entity)),
                     _code.Escape(entity),
                     _code.StringBefore(" : ", _typeMapper.GetTypeName(entity.BaseType)),
                     customEntity.GetInheritance());
    }
    
    public string EnumOpening(SimpleType enumType)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} enum {1} : {2}",
            Accessibility.ForType(enumType),
            _code.Escape(enumType),
            _code.Escape(_typeMapper.UnderlyingClrType(enumType)));
        }
    
    public void WriteFunctionParameters(EdmFunction edmFunction, Action<string, string, string, string> writeParameter)
    {
        var parameters = FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
        foreach (var parameter in parameters.Where(p => p.NeedsLocalVariable))
        {
            var isNotNull = parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null";
            var notNullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", " + parameter.FunctionParameterName + ")";
            var nullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", typeof(" + parameter.RawClrTypeName + "))";
            writeParameter(parameter.LocalVariableName, isNotNull, notNullInit, nullInit);
        }
    }
    
    public string ComposableFunctionMethod(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} IQueryable<{1}> {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            _code.Escape(edmFunction),
            string.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray()));
    }
    
    public string ComposableCreateQuery(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<{0}>(\"[{1}].[{2}]({3})\"{4});",
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            edmFunction.NamespaceName,
            edmFunction.Name,
            string.Join(", ", parameters.Select(p => "@" + p.EsqlParameterName).ToArray()),
            _code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray())));
    }
    
    public string FunctionMethod(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            returnType == null ? "int" : "ObjectResult<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
    }
    
    public string ExecuteFunction(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var callParams = _code.StringBefore(", ", String.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()));
        if (includeMergeOption)
        {
            callParams = ", mergeOption" + callParams;
        }
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction{0}(\"{1}\"{2});",
            returnType == null ? "" : "<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            edmFunction.Name,
            callParams);
    }
    
    public string DbSet(EntitySet entitySet)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} DbSet<{1}> {2} {{ get; set; }}",
            Accessibility.ForReadOnlyProperty(entitySet),
            _typeMapper.GetTypeName(entitySet.ElementType),
            _code.Escape(entitySet));
    }

    public string UsingDirectives(bool inHeader, bool includeCollections = true)
    {
        return inHeader == string.IsNullOrEmpty(_code.VsNamespaceSuggestion())
            ? string.Format(
                CultureInfo.InvariantCulture,
                "{0}using System;{1}{2}" +
                "{3}",
                inHeader ? Environment.NewLine : "",
                includeCollections ? (Environment.NewLine + "using System.Collections.Generic;") : "",
                         Environment.NewLine + "using Framework.Entities;",
                           Environment.NewLine + "using System.Linq;",
                inHeader ? "" : Environment.NewLine)
            : "";
    }
}



public class TypeMapper
{
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

    private readonly System.Collections.IList _errors;
    private readonly CodeGenerationTools _code;
    private readonly MetadataTools _ef;

    public TypeMapper(CodeGenerationTools code, MetadataTools ef, System.Collections.IList errors)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(ef, "ef");
        ArgumentNotNull(errors, "errors");

        _code = code;
        _ef = ef;
        _errors = errors;
    }

    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }

    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, null, null);
    }

    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }

    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, null, modelNamespace);
    }

    public string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }

        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }

        var typeName = _code.Escape(edmType.MetadataProperties
                                .Where(p => p.Name == ExternalTypeNameAttributeName)
                                .Select(p => (string)p.Value)
                                .FirstOrDefault())
            ?? (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
                _code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName), _code.Escape(edmType)) :
                _code.Escape(edmType));

        if (edmType is StructuralType)
        {
            return typeName;
        }

        if (edmType is SimpleType)
        {
            var clrType = UnderlyingClrType(edmType);
            if (!IsEnumType(edmType))
            {
                typeName = _code.Escape(clrType);
            }

            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                typeName;
        }

        throw new ArgumentException("edmType");
    }
    
    public Type UnderlyingClrType(EdmType edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }

        if (IsEnumType(edmType))
        {
            return GetEnumUnderlyingType(edmType).ClrEquivalentType;
        }

        return typeof(object);
    }
    
    public object GetEnumMemberValue(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var valueProperty = enumMember.GetType().GetProperty("Value");
        return valueProperty == null ? null : valueProperty.GetValue(enumMember, null);
    }
    
    public string GetEnumMemberName(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var nameProperty = enumMember.GetType().GetProperty("Name");
        return nameProperty == null ? null : (string)nameProperty.GetValue(enumMember, null);
    }

    public System.Collections.IEnumerable GetEnumMembers(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        var membersProperty = enumType.GetType().GetProperty("Members");
        return membersProperty != null 
            ? (System.Collections.IEnumerable)membersProperty.GetValue(enumType, null)
            : Enumerable.Empty<MetadataItem>();
    }
    
    public bool EnumIsFlags(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");
        
        var isFlagsProperty = enumType.GetType().GetProperty("IsFlags");
        return isFlagsProperty != null && (bool)isFlagsProperty.GetValue(enumType, null);
    }

    public bool IsEnumType(GlobalItem edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        return edmType.GetType().Name == "EnumType";
    }

    public PrimitiveType GetEnumUnderlyingType(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        return (PrimitiveType)enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, null);
    }

    public string CreateLiteral(object value)
    {
        if (value == null || value.GetType() != typeof(TimeSpan))
        {
            return _code.CreateLiteral(value);
        }

        return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})", ((TimeSpan)value).Ticks);
    }
    
    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    {
        ArgumentNotNull(types, "types");
        ArgumentNotNull(sourceFile, "sourceFile");
        
        var hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        if (types.Any(item => !hash.Add(item)))
        {
            _errors.Add(
                new CompilerError(sourceFile, -1, -1, "6023",
                    String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CaseInsensitiveTypeConflict"))));
            return false;
        }
        return true;
    }
    
    public IEnumerable<SimpleType> GetEnumItemsToGenerate(IEnumerable<GlobalItem> itemCollection)
    {
        return GetItemsToGenerate<SimpleType>(itemCollection)
            .Where(e => IsEnumType(e));
    }
    
    public IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
    {
        return itemCollection
            .OfType<T>()
            .Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName))
            .OrderBy(i => i.Name);
    }

    public IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemCollection)
    {
        return itemCollection
            .Where(i => i is EntityType || i is ComplexType || i is EntityContainer || IsEnumType(i))
            .Select(g => GetGlobalItemName(g));
    }

    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }

    public IEnumerable<EdmProperty> GetSimpleProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetSimpleProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }

    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }
    
    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }

    public IEnumerable<NavigationProperty> GetNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type);
    }
    
    public IEnumerable<NavigationProperty> GetCollectionNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    }
    
    public FunctionParameter GetReturnParameter(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var returnParamsProperty = edmFunction.GetType().GetProperty("ReturnParameters");
        return returnParamsProperty == null
            ? edmFunction.ReturnParameter
            : ((IEnumerable<FunctionParameter>)returnParamsProperty.GetValue(edmFunction, null)).FirstOrDefault();
    }

    public bool IsComposable(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var isComposableProperty = edmFunction.GetType().GetProperty("IsComposableAttribute");
        return isComposableProperty != null && (bool)isComposableProperty.GetValue(edmFunction, null);
    }

    public IEnumerable<FunctionImportParameter> GetParameters(EdmFunction edmFunction)
    {
        return FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
    }

    public TypeUsage GetReturnType(EdmFunction edmFunction)
    {
        var returnParam = GetReturnParameter(edmFunction);
        return returnParam == null ? null : _ef.GetElementType(returnParam.TypeUsage);
    }
    
    public bool GenerateMergeOptionFunction(EdmFunction edmFunction, bool includeMergeOption)
    {
        var returnType = GetReturnType(edmFunction);
        return !includeMergeOption && returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType;
    }
}

public class EdmMetadataLoader
{
    private readonly IDynamicHost _host;
    private readonly System.Collections.IList _errors;

    public EdmMetadataLoader(IDynamicHost host, System.Collections.IList errors)
    {
        ArgumentNotNull(host, "host");
        ArgumentNotNull(errors, "errors");

        _host = host;
        _errors = errors;
    }

    public IEnumerable<GlobalItem> CreateEdmItemCollection(string sourcePath)
    {
        ArgumentNotNull(sourcePath, "sourcePath");

        if (!ValidateInputPath(sourcePath))
        {
            return new EdmItemCollection();
        }

        var schemaElement = LoadRootElement(_host.ResolvePath(sourcePath));
        if (schemaElement != null)
        {
            using (var reader = schemaElement.CreateReader())
            {
                IList<EdmSchemaError> errors;
                var itemCollection = MetadataItemCollectionFactory.CreateEdmItemCollection(new[] { reader }, out errors);

                ProcessErrors(errors, sourcePath);

                return itemCollection;
            }
        }
        return new EdmItemCollection();
    }

    public string GetModelNamespace(string sourcePath)
    {
        ArgumentNotNull(sourcePath, "sourcePath");

        if (!ValidateInputPath(sourcePath))
        {
            return string.Empty;
        }

        var model = LoadRootElement(_host.ResolvePath(sourcePath));
        if (model == null)
        {
            return string.Empty;
        }

        var attribute = model.Attribute("Namespace");
        return attribute != null ? attribute.Value : "";
    }

    private bool ValidateInputPath(string sourcePath)
    {
        if (sourcePath == "$" + "edmxInputFile" + "$")
        {
            _errors.Add(
                new CompilerError(_host.TemplateFile ?? sourcePath, 0, 0, string.Empty,
                    GetResourceString("Template_ReplaceVsItemTemplateToken")));
            return false;
        }

        return true;
    }

    public XElement LoadRootElement(string sourcePath)
    {
        ArgumentNotNull(sourcePath, "sourcePath");

        var root = XElement.Load(sourcePath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);
        return root.Elements()
            .Where(e => e.Name.LocalName == "Runtime")
            .Elements()
            .Where(e => e.Name.LocalName == "ConceptualModels")
            .Elements()
            .Where(e => e.Name.LocalName == "Schema")
            .FirstOrDefault()
                ?? root;
    }

    private void ProcessErrors(IEnumerable<EdmSchemaError> errors, string sourceFilePath)
    {
        foreach (var error in errors)
        {
            _errors.Add(
                new CompilerError(
                    error.SchemaLocation ?? sourceFilePath,
                    error.Line,
                    error.Column,
                    error.ErrorCode.ToString(CultureInfo.InvariantCulture),
                    error.Message)
                {
                    IsWarning = error.Severity == EdmSchemaErrorSeverity.Warning
                });
        }
    }
    
    public bool IsLazyLoadingEnabled(EntityContainer container)
    {
        string lazyLoadingAttributeValue;
        var lazyLoadingAttributeName = MetadataConstants.EDM_ANNOTATION_09_02 + ":LazyLoadingEnabled";
        bool isLazyLoading;
        return !MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, out lazyLoadingAttributeValue)
            || !bool.TryParse(lazyLoadingAttributeValue, out isLazyLoading)
            || isLazyLoading;
    }
}

public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
    
private static readonly Lazy<System.Resources.ResourceManager> ResourceManager =
    new Lazy<System.Resources.ResourceManager>(
        () => new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(MetadataItemCollectionFactory).Assembly), true);

public static string GetResourceString(string resourceName)
{
    ArgumentNotNull(resourceName, "resourceName");

    return ResourceManager.Value.GetString(resourceName, null);
}








public static class Config
{
       public static object loadLock = new object();
       public static Dictionary<string, string> keyEntities = null;
      public static Dictionary<string, string> KeyEntities
    {
              get
        {
                     if(keyEntities == null)
            {
                           LoadConfig();
            }
                     return keyEntities;
        }
    }

       public static List<string> sequentialEntities = null;
      public static List<string> SequentialEntities
    {
              get
        {
                     if(sequentialEntities == null)
            {
                           LoadConfig();
            }
                     return sequentialEntities;
        }
    }
       
       public static void LoadConfig()
    {
              if(keyEntities == null)
        {
                     lock(loadLock)
            {
                           if(keyEntities == null)
                           {
                                  keyEntities = new Dictionary<string,string>();         
                                  sequentialEntities = new List<string>();
                                  string absolutePath = ProjectTraverser.Host.ResolvePath("EntityInfo.xml");  
                                  XDocument doc = XDocument.Load(absolutePath);                          
                                  var elements = doc.Root.Elements("Entity").Distinct();
                                  foreach (var node in elements)        
                                  {                                               
                                         keyEntities.Add(node.Attribute("Name").Value,node.Attribute("KeyEntity").Value);  
                                         if(node.Attribute("Continuity").Value == "Sequential")
                                         {
                                                sequentialEntities.Add(node.Attribute("Name").Value);
                                         }
                                  }     
                           }
            }
        }
    }




       public static string GetKeyEntity(string entityName)
    {
              string value;
              keyEntities.TryGetValue(entityName, out value);
              return value;
    }

       public static string GetContinuity(string entityName)
    {
              return SequentialEntities.Contains(entityName) ?
                     "Sequential" : "Continuous";
    }
}

public class CustomEntityType
{
       private static PrimitiveType DateTimeType = PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.DateTime);
       private static PrimitiveType StringType = PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.String);
       private static PrimitiveType BooleanType = PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.Boolean);
       private static string newLine1tab = Environment.NewLine + "    ";
       private static string newLine2tab = Environment.NewLine + "        ";
       private static string newLine3tab = Environment.NewLine + "            ";
       private static string newLine4tab = Environment.NewLine + "                ";
       private const string AuditSuffix = "Audit";
       private const string KeyEntitySuffix ="Key";
       private static List<CustomEntityType> entityTypes = null;
       private static object loadLock = new object();

       public CustomEntityType(EntityType entityType)
    {
              EntityType = entityType;
              Interfaces = new List<string>();
              CustomMembers = new List<string>();
              CheckForInterfaceImplementation();
    }

       public EntityType EntityType { get; private set; }
       public List<string> Interfaces { get; private set;}
       public List<string> CustomMembers {get; private set; }
       public string Name { get { return EntityType.Name; } }

       private void CheckForInterfaceImplementation()
    {

              if(EntityType.Properties.Any(
                     prop => prop.Name == "AuditUserId" &&
                                  prop.TypeUsage.EdmType == StringType) &&
                     EntityType.Properties.Any(
                     prop => prop.Name == "AuditDate" &&
                                  !prop.Nullable &&
                                  prop.TypeUsage.EdmType == DateTimeType)&&
                     EntityType.Properties.Any(
                     prop => prop.Name == "IsDeleted" &&
                                  !prop.Nullable &&
                                  prop.TypeUsage.EdmType ==  BooleanType))
        {
                     Interfaces.Add("IAuditTracker");
        } 
              else
        {
                     if(EntityType.Properties.Any(
                           prop => prop.Name == "CreatedBy" &&
                                         prop.TypeUsage.EdmType == StringType) &&
                           EntityType.Properties.Any(
                           prop => prop.Name == "CreatedDate" &&
                                         !prop.Nullable &&
                                         prop.TypeUsage.EdmType == DateTimeType))
                     {
                           Interfaces.Add("IInsertTracker");
                     } 
                     if(EntityType.Properties.Any(
                           prop => prop.Name == "UpdatedBy" &&
                                         prop.TypeUsage.EdmType == StringType) &&
                           EntityType.Properties.Any(
                           prop => prop.Name == "UpdatedDate" &&
                                         !prop.Nullable &&
                                         prop.TypeUsage.EdmType == DateTimeType))
                     {
                           Interfaces.Add("IUpdateTracker");
                     } 
                     if(EntityType.Properties.Any(
                           prop => prop.Name == "EarliestEffectiveDate" && 
                                         prop.Nullable &&
                                         prop.TypeUsage.EdmType == DateTimeType) &&
                           EntityType.Properties.Any(prop => prop.Name == "LatestEffectiveBeginDate" && 
                                         prop.Nullable &&
                                         prop.TypeUsage.EdmType == DateTimeType) &&
                           EntityType.Properties.Any(prop => prop.Name == "LatestEffectiveDate" && 
                                         prop.Nullable &&           
                                         prop.TypeUsage.EdmType == DateTimeType))
            {
                           Interfaces.Add("IKeyEntity");
            }
        }
    }

       private void TryImplementInterfaceForDateRange()
    {
              
              if(EntityType.Properties.Any(
                     prop => prop.Name == "EffectiveBeginDate" &&
                                  !prop.Nullable &&
                                  prop.TypeUsage.EdmType == DateTimeType) &&
                     EntityType.Properties.Any(
                     prop => prop.Name == "EffectiveEndDate" &&
                                  prop.Nullable &&
                                  prop.TypeUsage.EdmType == DateTimeType))
        {            
                     string keyName = Name + KeyEntitySuffix;
                     var keyQuery = (from navProp in EntityType.NavigationProperties
                                  where navProp.ToEndMember.GetEntityType().Name == keyName
                                  where navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One
                                  where navProp.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many
                                  select navProp);

                     var key = keyQuery.SingleOrDefault();

                     if(key != null)
            {
                           Interfaces.Add("IDateRange");

                           StringBuilder code = new StringBuilder();
                           code.Append(newLine1tab);
                           code.Append("#region IDateRange Members");
                           code.Append(newLine1tab);
                           code.Append("public IKeyEntity KeyEntity");
                           code.Append(newLine1tab);
                           code.Append('{');
                           code.Append(newLine2tab);         
                           code.Append("get");
                           code.Append(newLine2tab);  
                           code.Append('{');
                           code.Append(newLine3tab);
                           code.AppendFormat("return {0};", key.Name );

                            code.Append(newLine2tab);
                           code.Append("}");
                           code.Append(newLine1tab);
                           code.Append('}');
                           code.Append(newLine1tab);
                           code.Append(newLine1tab);

                           code.Append("public IEnumerable<IDateRange> Siblings");
                           code.Append(newLine1tab);
                           code.Append('{');
                           code.Append(newLine2tab);         
                           code.Append("get");
                           code.Append(newLine2tab);  
                           code.Append('{');
                           code.Append(newLine3tab);

                           //CustomEntityType other = entityTypes.Single(x=>x.Name == key.Name);

                           //var y = (from prop in other.EntityType.NavigationProperties
                           //where prop.ToEndMember.GetEntityType().Name == Name
                           //where prop.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many
                           //select prop.Name).Single();
                
                           
                           code.AppendFormat("return {0} != null ? {0}.Children.OrderBy(child => child.EffectiveBeginDate) : Enumerable.Empty<IDateRange>();", key.Name);                   
                     

                           code.Append(newLine2tab);
                           code.Append("}");
                           code.Append(newLine1tab);
                           code.Append('}');
                           code.Append(newLine1tab);

                           code.Append(newLine1tab);
                           code.Append("public RangeContinuity Continuity");
                           code.Append(newLine1tab);
                           code.Append('{');
                           code.Append(newLine2tab);         
                           code.Append("get");
                           code.Append(newLine2tab);  
                           code.Append('{');
                           code.Append(newLine3tab);
                           
                           code.AppendFormat("return RangeContinuity.{0};", Config.GetContinuity(Name));

                           code.Append(newLine2tab);
                           code.Append("}");
                           code.Append(newLine1tab);
                           code.Append('}');
                           code.Append(newLine1tab);

                           code.Append("#endregion");
                           CustomMembers.Add(code.ToString());
            }
        }

    }
       
       private void ImplementInterfaceForAudit(CustomEntityType auditType)
    {
              List<string> notMatchingProperties = 
                     (from auditProp in auditType.EntityType.Properties
                     where !EntityType.Properties.Any(liveProp => liveProp.Name == auditProp.Name)
                     where auditProp.Name != "IsDeleted"
                     where auditProp.Name != "AuditDate"
                     where auditProp.Name != "AuditUserId"
                     where auditProp.Name != "CreatedUserName"   //TODO REMOVE
                     where auditProp.Name != String.Format("{0}Id", auditType.EntityType.Name)
                     where !auditProp.Nullable
                     select auditProp.Name).ToList();
              if(notMatchingProperties.Any())
        {
                     throw new InvalidOperationException(String.Format(
                           "{0}'s Audit table has not nullable column(s) '{2}' that do not match the {1}'s Live Table",
                           auditType.EntityType.Name, EntityType.Name, String.Join(", ", notMatchingProperties)));
        }

              List<string> matchingProperties = 
                     (from liveProp in EntityType.Properties
                     from auditProp in auditType.EntityType.Properties
                     where liveProp.Name == auditProp.Name
                     where liveProp.Nullable == auditProp.Nullable ||
                           (!liveProp.Nullable && auditProp.Nullable)
                     where liveProp.TypeUsage.EdmType == auditProp.TypeUsage.EdmType
                     select liveProp.Name).ToList();

              if(matchingProperties.Any())  //else?
        {                                
                     //if auditType isn't IAuditTracker error?
                     
                     Interfaces.Add(String.Format(
                           CultureInfo.InvariantCulture, 
                           "ICreateAudit<{0}>",
                           auditType.Name));
                     StringBuilder code = new StringBuilder();
                     code.Append(newLine1tab);
                     code.Append("#region ICreateAudit Members");
                     code.Append(newLine1tab);
                     code.AppendFormat("public {0} CreateAudit()", auditType.Name);
                     code.Append(newLine1tab);
                     code.Append('{');
                     code.Append(newLine2tab);
              
                     code.AppendFormat("return new {0}", auditType.Name);
                     code.Append(newLine2tab);
                     code.Append('{');                 
              
                     foreach(string match in matchingProperties)
            {
                           code.Append(newLine3tab);
                           code.AppendFormat("{0} = this.{0},", match);
            }

                     code.Append(newLine2tab);
                     code.Append("};");

                     code.Append(newLine1tab);
                     code.Append('}');
                     code.Append(newLine1tab);
                     code.Append("#endregion");
                     code.Append(newLine1tab);
                     CustomMembers.Add(code.ToString());
        }
    }


       private void ImplementInterfaceForKeyEntity()
    {

              if(EntityType.Properties.Any(
                           prop => prop.Name == "EarliestEffectiveDate" && 
                                         prop.Nullable &&
                                         prop.TypeUsage.EdmType == DateTimeType) &&
                           EntityType.Properties.Any(prop => prop.Name == "LatestEffectiveBeginDate" && 
                                         prop.Nullable &&
                                         prop.TypeUsage.EdmType == DateTimeType) &&
                           EntityType.Properties.Any(prop => prop.Name == "LatestEffectiveDate" && 
                                         prop.Nullable &&           
                                         prop.TypeUsage.EdmType == DateTimeType))
                       {
                     string childrenTypeName = Name.Substring(0, Name.Length - KeyEntitySuffix.Length);        
                        
                     var keyQuery = (from navProp in EntityType.NavigationProperties
                              where navProp.ToEndMember.GetEntityType().Name == childrenTypeName
                                  where navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many
                                  where navProp.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One
                                  select navProp);

                                  var key = keyQuery.SingleOrDefault();
                     if(key == null)
            {
                           throw new InvalidOperationException(String.Format("Unable to find the relationship between the {0} key and the conventional '{1}' live table."+
                                  "  This can be cause by a few things: DB does not have the relation, an unique index created by ErWin, the naming convention change during EF conversion.",
                                  Name, childrenTypeName));
            } 

                     StringBuilder code = new StringBuilder();
                     code.Append(newLine1tab);
                     code.Append("#region IKeyEntity Custom Members");
                     code.Append(newLine1tab);
                     code.Append(newLine1tab);
                     code.Append("public IEnumerable<IDateRange> Children"); 
                     code.Append(newLine1tab);
                     code.Append('{');
                     code.Append(newLine2tab);
                     code.Append("get");
                     code.Append(newLine2tab);
                     code.Append('{');
                     code.Append(newLine3tab);
                     code.AppendFormat("return this.{0};", key.Name);
                     code.Append(newLine2tab);
                     code.Append('}');    
                     code.Append(newLine1tab);  
                     code.Append('}');
                     code.Append(newLine1tab);

                     var y = (from prop in EntityType.NavigationProperties
                     where prop.ToEndMember.GetEntityType().Name == key.ToEndMember.Name || 
                                  prop.ToEndMember.GetEntityType().Name == key.ToEndMember.Name + "s"
                     where prop.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many
                     select prop).SingleOrDefault();
                           
                     if(y == null)
            {
                           throw new InvalidOperationException(String.Format("Could not find return type for child relationship for {0}.  Properties are {1}, looking for for {2}.", 
                                  EntityType.Name, String.Join(", ", EntityType.NavigationProperties.Select(prop => prop.ToEndMember.GetEntityType().Name)), key.ToEndMember.Name));
            }

                     var childType = y.ToEndMember.GetEntityType().Name;
                     code.Append(newLine1tab);
                     code.AppendFormat("public {0} {1}",childType,"Current");
                     code.Append(newLine1tab);
                     code.Append('{');
                     code.Append(newLine2tab);
                     code.Append("get");
                     code.Append(newLine2tab);  
                     code.Append('{');
                     code.Append(newLine3tab);  
                     code.AppendFormat("return this.{0}.SingleOrDefault(x=>x.EffectiveBeginDate==LatestEffectiveBeginDate);", key.Name);
                     code.Append(newLine2tab);
                     code.Append('}');          
                     code.Append(newLine1tab);  
                     code.Append('}');
                     code.Append(newLine1tab);
                           
                     code.Append(newLine1tab);
                     code.Append("#endregion");
                     code.Append(newLine1tab);
                     CustomMembers.Add(code.ToString());
              }
    }
       public static List<CustomEntityType> GetEntityTypes(TypeMapper typeMapper, IEnumerable<GlobalItem> itemCollection)
    {
              if(entityTypes == null)
        {
                     lock(loadLock)
            {
                           if(entityTypes == null)
                           {
                                  entityTypes = typeMapper.GetItemsToGenerate<EntityType>(itemCollection).
                                         Select(e => new CustomEntityType(e)).ToList();
                                  var auditTablesWithoutLiveTable = (from auditEntity in entityTypes
                                                                                         where auditEntity.Name.EndsWith(AuditSuffix)
                                                                                         let liveName = auditEntity.Name.Substring(0, auditEntity.Name.Length - AuditSuffix.Length)                                          
                                                                                         where !entityTypes.Any(liveEntity => liveEntity.Name != liveName)
                                                                                         select auditEntity.Name);
                                  if(auditTablesWithoutLiveTable.Any())
                    {
                                         throw new InvalidOperationException(String.Format("Audit suffix exists on tables, but no live table found on table(s) {0}.",
                                                       String.Join(", ", auditTablesWithoutLiveTable)));
                    }
                                   
                                  foreach(CustomEntityType entity in entityTypes)
                    {
                                         string auditName = entity.Name + AuditSuffix;
                                         CustomEntityType auditType = entityTypes.FirstOrDefault(a => a.Name == auditName);
                                         if(auditType != null)
                                         {
                                                       entity.ImplementInterfaceForAudit(auditType);
                                         }
                        
                                         entity.TryImplementInterfaceForDateRange();
                                         
                                         if(entity.Name.Contains(KeyEntitySuffix))
                        {
                                                       entity.ImplementInterfaceForKeyEntity();
                        }
                    }
                           }
            }
        }
              return entityTypes;  
    }

       public string GetInheritance()
    {
              if(Interfaces.Any())
        {
                     return String.Format(CultureInfo.InvariantCulture,
                           " : {0}",
                           String.Join(", ", Interfaces));
        }
              else
              {
                     return String.Empty;
        }
    }
}





#>

